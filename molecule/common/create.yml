---

- name: Create molecule Docker instance(s)
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - molecule-vars.yml
  tasks:
    - name: Create Dockerfiles from image names
      template:
        src: "{{ molecule_scenario_directory }}/../common/Dockerfile.{{ item.image_tpl | default('default') }}.j2"
        dest: "{{ molecule_ephemeral_directory }}/Dockerfile_{{ item.image | regex_replace('[^a-zA-Z0-9_]', '_') }}"
      with_items: "{{ molecule_yml.platforms }}"
      register: platforms

    - name: Discover local Docker images
      docker_image_facts:
        name: "molecule_local/{{ item.item.name }}"
        docker_host: "{{ docker_host | default(omit) }}"
        cacert_path: "{{ docker_tls_ca_cert | default(omit) }}"
        cert_path: "{{ docker_tls_client_cert | default(omit) }}"
        key_path: "{{ docker_tls_client_key | default(omit) }}"
        tls_verify: "{{ docker_tls_verify | default(omit) }}"
      with_items: "{{ platforms.results }}"
      register: docker_images

    - name: Build an Ansible compatible image
      docker_image:
        path: "{{ molecule_ephemeral_directory }}"
        name: "molecule_local/{{ item.item.image }}"
        dockerfile: "{{ item.item.dockerfile | default(item.invocation.module_args.dest) }}"
        force: "{{ item.item.force | default(True) }}"
        docker_host: "{{ docker_host | default(omit) }}"
        cacert_path: "{{ docker_tls_ca_cert | default(omit) }}"
        cert_path: "{{ docker_tls_client_cert | default(omit) }}"
        key_path: "{{ docker_tls_client_key | default(omit) }}"
        tls_verify: "{{ docker_tls_verify | default(omit) }}"
      with_items: "{{ platforms.results }}"
      when: platforms.changed or docker_images.results | map(attribute='images') | select('equalto', []) | list | count >= 0

    - name: Create molecule instance(s)
      docker_container:
        name: "{{ item.name }}"
        hostname: "{{ item.name }}"
        image: "molecule_local/{{ item.image }}"
        command: "{{ item.command | default(omit) }}"
        privileged: yes
        volumes:
          # Mount the cgroups fs to allow SystemD to run into the containers
          - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
        recreate: no
        state: started
        docker_host: "{{ docker_host | default(omit) }}"
        cacert_path: "{{ docker_tls_ca_cert | default(omit) }}"
        cert_path: "{{ docker_tls_client_cert | default(omit) }}"
        key_path: "{{ docker_tls_client_key | default(omit) }}"
        tls_verify: "{{ docker_tls_verify | default(omit) }}"
      with_items: "{{ molecule_yml.platforms }}"
